//Регулярные выражения - это
//последовательность определенных
//символов,которые составляют шаблон
//для поиска,замены текста,
//удаления и также для проверки соответсвия

// Синтаксис конструктора regex
// new RegExp(pattern, [flags])

//Создание regex с помощью 
//конструктора без флагов
// const myPattern = new RegExp('[a-z]');

// Создание regex с помощью консруктора с флагом
// const myPattern = new RegExp('[a-z]', 'g')




// Синтаксис литерала regex
//pattern/flags

// Создание regex с помощью литерала без флагов
// const myPattern = /[a-z]/

//Создание regex с помощью литерала с флагом
// const myPattern = /[a-z]/g

// Специальные символы

// 1.
// Символный класс
// . - любой символ,кроме первой строки
// \d - однозарядное число (то же, что и [0-9])
// \w - отдельный буквенно-число словообразующий символ
//из латинского алфавита,включая подчеркивание
//(то же, что и [A-Za-z0-9_])
// \s - отдельный символ разделителя (пробел, табуляция и.т.п)
//(то же самое, что и [\t\r\n\v\f])
// \D - отдельный нечисловой символ(то же, что и [^0-9])
// \W- отдельный несловообразующий символ из латинского алфавита 
// (то же, что и [^A-Za-z0-0_])
// \S - отделный символ, который не является разделители
// (то же, что и [^\t\r\n\v\f])


//2.
// Оператор контроля
// ^ - начало строки (последующее регулярное выражение 
// должно совпадать с началом проверяемой строки)
// $ - конец строки (последуюшее регулярное выражение)
// должно совпадать с концом проверямой строки)


// 3.
// Квантификатор
// * - 0 или более совподаний с предщестсвующим выпражением 
// + - 1 или болле совпадений с предшествующим выражением
// ? - предшествующее выражения необязательно
// (то есть совпадений 0 или 1)
// x{n} - "n" должно быть целым положетельным числом.
// количество вхождений предществующего выражения "x" равно "n"
// x{n, } - "n" должно быть целым положительным числом.
//  Количество вхождений предществующего выражения "x" равно,
// как минимум "n"
//x{n, m} "n"  может быть равно 0 или целому положительному числу.
//"m" - целое положительное число.
//Если "m" > "n", количество вхождений предшествующего
// выражения "x" Равное минимум "n" и максимум "m"



// 4.
// Флаг
// g - Глобальная поиск, не останавливается после нахождения первого совпадения
// i - Игнорирование регистра
// s - Точка (.) соответствует переводу на новую строку 
// m - Многострочный ввод, начинается с "^" и заканчивается "$" (начало и конец каждой строки)

